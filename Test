package com.sgcib.digitrade.reporting.infrastructure.client.tradefinancecompliance;

import com.sgcib.digitrade.reporting.infrastructure.client.tradefinancecompliance.dto.EscalationType;
import com.sgcib.digitrade.reporting.infrastructure.client.tradefinancecompliance.dto.EscalationTypes;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.springframework.http.ResponseEntity;

import java.util.Arrays;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

public class TradefinanceComplianceClientCacheServiceTest {

    private TradeFinanceComplianceClient tradeFinanceComplianceClient;
    private TradefinanceComplianceClientCacheService tradefinanceComplianceClientCacheService;

    @BeforeEach
    public void setUp() {
        tradeFinanceComplianceClient = mock(TradeFinanceComplianceClient.class);
        tradefinanceComplianceClientCacheService = new TradefinanceComplianceClientCacheService(tradeFinanceComplianceClient);
    }

    @Test
    public void should_return_list_of_all_the_selected_escalation_types() {
        // Given
        List<String> selectedEscalationTypeCodes = Arrays.asList("CODE1", "CODE3");

        EscalationType type1 = new EscalationType("CODE1", "Type 1");
        EscalationType type2 = new EscalationType("CODE2", "Type 2");
        EscalationType type3 = new EscalationType("CODE3", "Type 3");

        EscalationTypes escalationTypes = new EscalationTypes(Arrays.asList(type1, type2, type3));
        when(tradeFinanceComplianceClient.getEscalationTypes()).thenReturn(ResponseEntity.ok(escalationTypes));

        // When
        List<String> result = tradefinanceComplianceClientCacheService.getEscalationTypesFromComplianceSummary(selectedEscalationTypeCodes);

        // Then
        assertEquals(2, result.size());
        assertEquals(Arrays.asList("Type 1", "Type 3"), result);
    }
}
