import { TestBed } from '@angular/core/testing';
import { Router } from '@angular/router';
import { UserService } from '../Services/user.service';
import { NavbarComponent } from './navbar.component';

describe('NavbarComponent', () => {
  let component: NavbarComponent;
  let fixture: ComponentFixture<NavbarComponent>;
  let mockRouter: Router;
  let mockUserService: UserService;

  beforeEach(async () => {
    mockRouter = { navigate: jest.fn() };
    mockUserService = {};

    await TestBed.configureTestingModule({
      declarations: [NavbarComponent],
      providers: [
        { provide: Router, useValue: mockRouter },
        { provide: UserService, useValue: mockUserService },
      ],
    }).compileComponents();

    fixture = TestBed.createComponent(NavbarComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });

  it('should navigate to user on logout', () => {
    component.Logout();
    expect(mockRouter.navigate).toHaveBeenCalledWith(['/user']);
  });

  it('should navigate to route', () => {
    const route = '/test';
    component.navigateTo(route);
    expect(mockRouter.navigate).toHaveBeenCalledWith([route]);
  });
});


public List<String> getEscalationTypesFromComplianceSummary() {
    // Fetch the list of escalation type names from the client service
    ResponseEntity<List<String>> responseEntity = this.tradeFinanceComplianceClient.getEscalationTypes();

    if (responseEntity != null) {
        // Ensure the body is not null and return it
        List<String> escalationTypeNames = responseEntity.getBody();

        if (escalationTypeNames != null) {
            return escalationTypeNames; // Return the list of names
        } else {
            return Collections.emptyList(); // Return an empty list if body is null
        }
    } else {
        return Collections.emptyList(); // Return an empty list if responseEntity is null
    }
}


public List<String> getEscalationTypesFromComplianceSummary() {
    // Fetch escalation types from the compliance client
    ResponseEntity<EscalationTypes> responseEntity = this.tradeFinanceComplianceClient.getEscalationTypes();

    if (responseEntity != null) {
        // Ensure the body is not null and extract escalation types
        List<EscalationType> escalationTypes = Objects.requireNonNull(responseEntity.getBody()).getEscalationTypes();

        if (escalationTypes != null) {
            // Stream escalation types to extract names directly
            return escalationTypes.stream()
                .map(EscalationType::getName) // Extract names
                .collect(Collectors.toList());
        } else {
            // Return an empty list if escalationTypes is null
            return Collections.emptyList();
        }
    } else {
        // Return an empty list if the responseEntity is null
        return Collections.emptyList();
    }
}


I need clarity on a few points, Sushma. First, my probation is supposed to end in December, but you mentioned that I will be relieved from Digitrade in January. Second, I received a call from the 'CIO Ref' team regarding a requirement. They mentioned that I can only switch teams after completing 18 months of experience in SG. They also suggested I connect with my seniors regarding this."







package com.sgcib.digitrade.reporting.domain.complianceresponse;

import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

class ComplianceResponseInfoTest {

    @Test
    void testIsApproved() {
        // Given: ComplianceResponseInfo object with status "APPROVED"
        ComplianceResponseInfo response = ComplianceResponseInfo.builder()
                .status("APPROVED")
                .build();

        // When: Calling isApproved
        boolean result = response.isApproved();

        // Then: It should return true
        assertTrue(result);

        // And: isRejected should return false
        assertFalse(response.isRejected());
    }

    @Test
    void testIsRejected() {
        // Given: ComplianceResponseInfo object with status "REJECTED"
        ComplianceResponseInfo response = ComplianceResponseInfo.builder()
                .status("REJECTED")
                .build();

        // When: Calling isRejected
        boolean result = response.isRejected();

        // Then: It should return true
        assertTrue(result);

        // And: isApproved should return false
        assertFalse(response.isApproved());
    }

    @Test
    void testIsApprovedAndIsRejectedForOtherStatuses() {
        // Given: ComplianceResponseInfo object with a different status
        ComplianceResponseInfo response = ComplianceResponseInfo.builder()
                .status("PENDING")
                .build();

        // When: Calling isApproved and isRejected
        boolean isApproved = response.isApproved();
        boolean isRejected = response.isRejected();

        // Then: Both should return false
        assertFalse(isApproved);
        assertFalse(isRejected);
    }

    @Test
    void testBuilderInitialization() {
        // Given: Sample data for ComplianceResponseInfo
        ComplianceResponseAttachment attachment = new ComplianceResponseAttachment();
        ComplianceResponseInfo response = ComplianceResponseInfo.builder()
                .status("PENDING")
                .attachment(attachment)
                .comment("Test comment")
                .escalationTypes(List.of("TYPE1", "TYPE2"))
                .build();

        // Then: Fields should match the given data
        assertEquals("PENDING", response.getStatus());
        assertEquals(attachment, response.getAttachment());
        assertEquals("Test comment", response.getComment());
        assertEquals(List.of("TYPE1", "TYPE2"), response.getEscalationTypes());
    }
}






package com.sgcib.digitrade.reporting.domain.compliancerespo;

import org.junit.jupiter.api.Test;
import static org.assertj.core.api.Assertions.assertThat;

class ComplianceResponseAttachmentTest {

    @Test
    void testLombokGeneratedMethods() {
        // Create an instance using the builder
        ComplianceResponseAttachment attachment = ComplianceResponseAttachment.builder()
                .id(1L)
                .name("Test Attachment")
                .content(new byte[]{1, 2, 3})
                .build();

        // Validate properties
        assertThat(attachment.getId()).isEqualTo(1L);
        assertThat(attachment.getName()).isEqualTo("Test Attachment");
        assertThat(attachment.getContent()).isEqualTo(new byte[]{1, 2, 3});

        // Update properties using setters
        attachment.setId(2L);
        attachment.setName("Updated Attachment");
        attachment.setContent(new byte[]{4, 5, 6});

        // Validate updated properties
        assertThat(attachment.getId()).isEqualTo(2L);
        assertThat(attachment.getName()).isEqualTo("Updated Attachment");
        assertThat(attachment.getContent()).isEqualTo(new byte[]{4, 5, 6});
    }

    @Test
    void testNoArgsConstructor() {
        // Create an instance using the no-args constructor
        ComplianceResponseAttachment attachment = new ComplianceResponseAttachment();

        // Set properties
        attachment.setId(10L);
        attachment.setName("No Args Attachment");
        attachment.setContent(new byte[]{10, 20, 30});

        // Validate properties
        assertThat(attachment.getId()).isEqualTo(10L);
        assertThat(attachment.getName()).isEqualTo("No Args Attachment");
        assertThat(attachment.getContent()).isEqualTo(new byte[]{10, 20, 30});
    }

    @Test
    void testAllArgsConstructor() {
        // Create an instance using the all-args constructor
        ComplianceResponseAttachment attachment = new ComplianceResponseAttachment(
                5L, "All Args Attachment", new byte[]{50, 60, 70});

        // Validate properties
        assertThat(attachment.getId()).isEqualTo(5L);
        assertThat(attachment.getName()).isEqualTo("All Args Attachment");
        assertThat(attachment.getContent()).isEqualTo(new byte[]{50, 60, 70});
    }

    @Test
    void testEqualsAndHashCode() {
        // Create two identical instances
        ComplianceResponseAttachment attachment1 = new ComplianceResponseAttachment(1L, "Attachment", new byte[]{1, 2, 3});
        ComplianceResponseAttachment attachment2 = new ComplianceResponseAttachment(1L, "Attachment", new byte[]{1, 2, 3});

        // Validate equality and hashCode
        assertThat(attachment1).isEqualTo(attachment2);
        assertThat(attachment1.hashCode()).isEqualTo(attachment2.hashCode());

        // Modify one instance and validate inequality
        attachment2.setId(2L);
        assertThat(attachment1).isNotEqualTo(attachment2);
    }

    @Test
    void testToString() {
        // Create an instance and validate its toString representation
        ComplianceResponseAttachment attachment = new ComplianceResponseAttachment(1L, "Test", new byte[]{1, 2, 3});
        assertThat(attachment.toString()).contains("ComplianceResponseAttachment(id=1, name=Test, content=[1, 2, 3])");
    }
}








readDocument(file: File): Observable<LCDocument> { 
  return this.extractJsonFromPdf(file).pipe(
    map(content => this.formatJsonContentToTextEditorContent(content)) // Format the extracted content
  );
}



"Hello Hithashree, I connected with Tousif regarding the Sonar issue. He doesn't have access to mark them as false positives. Can I ask Frederic Coste, 'While committing my changes, I am getting Sonar issues on two fields, such as unused fields. Can you please mark them as false positives?'"




<div xmlns="http://www.w3.org/1999/xhtml" xmlns:th="http://www.thymeleaf.org" 
     th:fragment="escalation-type-compliance-summary-report">

    <div class="escalation-type-compliance-summary-report" 
         th:if="${escalationTypes != null && !escalationTypes.isEmpty()}">

        <span class="escalation-section-title">Escalation Type</span>

        <ul class="escalation-types-list">
            <li th:if="${escalationTypes.contains('sanction and Embargo')}" th:text="'Sanction and Embargo'"></li>
            <li th:if="${escalationTypes.contains('aml')}" th:text="'AML'"></li>
            <li th:if="${escalationTypes.contains('csr')}" th:text="'CSR'"></li>
        </ul>
    </div>
</div>


package com.example.enums;

public enum EscalationType {
    SANCTION_AND_EMBARGO("Sanction and Embargo"),
    AML("AML"),
    CSR("CSR");

    private final String displayName;

    EscalationType(String displayName) {
        this.displayName = displayName;
    }

    public String getDisplayName() {
        return displayName;
    }
}


<div xmlns="http://www.w3.org/1999/xhtml" xmlns:th="http://www.thymeleaf.org"
     th:fragment="escalation-type-compliance-summary-report">

    <div class="escalation-type-compliance-summary-report"
         th:if="${escalationTypes != null && !escalationTypes.isEmpty()}">

        <span class="escalation-section-title">Escalation Type</span>

        <ul class="escalation-types-list">
            <li th:each="type : ${escalationTypes}" th:text="${type.displayName}"></li>
        </ul>
    </div>
</div>
