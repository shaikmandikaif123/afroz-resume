import { ComponentFixture, TestBed } from '@angular/core/testing';
import { FormsModule, NgForm } from '@angular/forms';
import { Router } from '@angular/router';
import { of, throwError } from 'rxjs';

import { LoginComponent } from './login.component';
import { UserService } from '../Services/user.service';
import { UserDetails } from '../user.model';

describe('LoginComponent', () => {
  let component: LoginComponent;
  let fixture: ComponentFixture<LoginComponent>;
  let mockUserService: UserService;
  let mockRouter: Router;

  beforeEach(async () => {
    mockUserService = {
      login: jest.fn(),
    } as unknown as UserService;

    mockRouter = {
      navigate: jest.fn()
    } as unknown as Router;

    await TestBed.configureTestingModule({
      declarations: [LoginComponent],
      imports: [FormsModule],
      providers: [
        { provide: UserService, useValue: mockUserService },
        { provide: Router, useValue: mockRouter }
      ]
    }).compileComponents();

    fixture = TestBed.createComponent(LoginComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });

  it('should call login on form submit if form is valid', () => {
    const form = {
      valid: true,
      touched: true,
      controls: {
        phoneNumber: {
          valid: true
        },
        password: {
          valid: true
        }
      }
    } as unknown as NgForm;

    component.loginForm = { phoneNumber: '1234567890', password: 'password' };
    const userDetails: UserDetails = { id: '1' };
    mockUserService.login = jest.fn().mockReturnValue(of(userDetails));

    component.Login(form);

    expect(mockUserService.login).toHaveBeenCalledWith(component.loginForm);
    expect(localStorage.setItem).toHaveBeenCalledWith('id', userDetails.id);
    expect(mockRouter.navigate).toHaveBeenCalledWith(['/user-details']);
  });

  it('should not call login if form is invalid', () => {
    const form = {
      valid: false,
      touched: true,
      controls: {
        phoneNumber: {
          valid: false
        },
        password: {
          valid: false
        }
      }
    } as unknown as NgForm;

    component.Login(form);

    expect(mockUserService.login).not.toHaveBeenCalled();
  });

  it('should handle login error', () => {
    const form = {
      valid: true,
      touched: true,
      controls: {
        phoneNumber: {
          valid: true
        },
        password: {
          valid: true
        }
      }
    } as unknown as NgForm;

    mockUserService.login = jest.fn().mockReturnValue(throwError(() => new Error('Login failed')));
    jest.spyOn(window, 'alert').mockImplementation(() => {});

    component.Login(form);

    expect(mockUserService.login).toHaveBeenCalled();
    expect(console.error).toHaveBeenCalledWith(expect.any(Error));
    expect(window.alert).toHaveBeenCalledWith('Login failed...phoneNumber or password may be wrong');
  });

  it('should navigate to register on navigateTo call', () => {
    component.navigateTo();
    expect(mockRouter.navigate).toHaveBeenCalledWith(['/register']);
  });
});

